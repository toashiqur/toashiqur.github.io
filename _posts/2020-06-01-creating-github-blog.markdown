---
title: Creating Website
subtitle: Creating GitHub Blog Using Jekyll
layout: default
modal-id: 1
date: 2014-07-18
img: github-blog.png
thumbnail: github-blog-thumbnail.png
alt: image-alt
project-date: April 2014
tags: GitHub, Blog, Jekyll, Web Development
description: <div style="text-align:left;">Forking and modifying an existing <a href="https://github.com/barryclark/jekyll-now">Jekyll template</a> is one of the easiest ways to build GitHub blogs. But if you prefer some adventure and want to experiment eveything from scratch then this post is for you! </p>To create a blog on GitHub at first you need a <a href="https://github.com/">GitHub</a> account. After log in to your account you will see a panel on the left to create a repository. Create a new repository and name it <i>your_user_name.github.io</i>. When creating the repository make it public, you may skip Initialize the repository with a ReadMe file, choose a licence of your preference. After creating the repository you will get the address of the repository similar to <i>https://github.com/your_user_name/your_user_name.github.io.git</i>. </p>Use the <a href="https://pages.github.com/">git</a> tool to clone the repository to your own machine.<br><code>$git clone https://github.com/username/username.github.io</code></br> </p>Now download and install the <a href="https://jekyllrb.com/docs/installation/windows/">Jekyll</a> tool. This tool will mainly build your website. It has noting to do with GitHub. Open the <i>Windows command prompt</i> and check the Jekyll version to ensure it has been installed successfully.</br><code>jekyll -v</code></p>Now set the path of the command prompt to your cloned repository <i>your_user_name.github.io.git</i> and give the following <a href="https://michaelsoolee.com/jekyll-existing-folder/">command</a>. The dot (.) here is part of the command.<br><code>jekyll new .</code></br>if you have pre-existing files in your repository then <code>jekyll new . --force</code></p>It will create the structure of your website. Jekyll can help you to see the website on your localhost. Run the following command on Windows command prompt.</br><code>jekyll serve</code><br>If it doesn't work then try the following command. <code></br>bundle exec jekyll serve</code></p>It will generate a server address (http://). Copy-paste that to your browser. Your Blog is ready. Congratulations!</br>Now you can go online pushing your site to your GitHub account. Use the Git bash to give the following command on you project directory<code></br>$git add --all </br>$git commit -m "Initial Commit" </br>$git push -u origin master</code></p>Now go to to your GitHub repository (refresh if it is already open). It should show the uploaded project in the master branch. Go to the <i>Settings</i> of your repository. Under the <i>GitHub Pages</i> section select a <i>Source</i> branch (for example the master branch). The page will refresh and you will find the link of your website. If it's showing <i>Your site is ready to be published at http://</i> then wait a while and refresh your page. It will change to <i>Your site is published at http://</i>.</p>Your blog is online now, but it's holding only the default contents. You can customize it in your own way. One starting point is <i>_config.yml</i>. To publish your blog content modify following the format of the post given as an example inside the directory <i>_posts</i>. The link to your post will appear automatically in your Front matter.</p>You can customize your blog directly on GitHub or on your local machine. If you work on your local machine you can use <a href="https://code.visualstudio.com/">VSC</a> (Visual Studio Code) ( or a text editor will also do). </p>After modifying your code, save it and check the website using Jekyll on your own machine</br><code>jekyll serve</code></p>If Jekyll is already running simply refresh the page. If the contents of the page doesn't change even after refreshing then stop Jekyll and try<code></br>bundle exec jekyll clean </br>jekyll serve</code><p>When satisfied commit the changes using git bash and push it to your GitHub account.</p></div>
---